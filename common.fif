"TonUtil.fif" include
"Asm.fif" include

variable mtdns-seqno
variable mtdns-pubkey
variable mtdns-privkey
variable curr_data

// ( str -- method_id )
{ 
    <b swap $, b> <s dup sbits 8 / B@ crc16 0xffff and 0x10000 or
} : method_id

// ( args method_id -- results )
{
    "mtdns.fif" include <s
    curr_data @ B>boc
    runvm
    boc>B curr_data !
} : run_method

// ( -- seqno )
{ mtdns-seqno @ dup 1+ mtdns-seqno ! } : get-mtdns-seqno

// ( -- )
{ mtdns-seqno @ 1- mtdns-seqno ! } : dec-mtdns-seqno

// ( -- )
{
    mtdns-seqno 0!
    "test.pk" load-generate-keypair
    mtdns-privkey !
    mtdns-pubkey !

    <b 0 32 u,
       mtdns-pubkey @ B,
       null dict,
    b> boc>B curr_data !
} : init_test

// ( msg -- results )
{
    dup hashu mtdns-privkey @ ed25519_sign_uint // msg sig
    <b swap B, swap <s s, b> <s
    -1
    run_method
} : send_ext_msg

// ( dname cat_id addr -- retcode )
{
    ."domain_upsert: " .s ." -> "
    swap // dname addr cat_id
    <b get-mtdns-seqno 32 u, 0x2 32 u, swap 16 i, swap 256 u, swap $, b> // msg
    send_ext_msg
    .s
} : domain_upsert

// ( dname cat_id -- retcode )
{
    ."domain_delete: " .s ." -> "
    <b get-mtdns-seqno 32 u, 0x3 32 u, swap 16 i, swap $, b> // msg
    send_ext_msg
    .s
} : domain_delete

// ( new_pubkey -- retcode )
{
    ."mtdns_transfer: " .s ." -> "
    <b get-mtdns-seqno 32 u, 0x10 32 u, swap B, b> // msg
    send_ext_msg
    .s
} : mtdns_transfer

// ( new_code -- retcode )
{
    ."mtdns_upgrade: " .s ." -> "
    <b get-mtdns-seqno 32 u, 0x11 32 u, swap ref, b> // msg
    send_ext_msg
    .s
} : mtdns_upgrade

// ( -- retcode )
{
    ."mtdns_unknown_op: " .s ." -> "
    <b get-mtdns-seqno 32 u, 0xff 32 u, b> // msg
    send_ext_msg
    .s
} : mtdns_unknown_op

// ( dname cat_id -- len rec_value retcode )
{
    ."get_dnsresolve: " .s ." -> "
    <b rot $, b> <s
    "dnsresolve" method_id
    run_method
    swap dup null? { <s 256 i@+ s> } ifnot swap
    .s
} : get_dnsresolve

// ( -- (v1, v2, v3) retcode )
{
    ."get_version: " .s ." -> "
    "version" method_id
    run_method
    .s
} : get_version

// ( -- seqno retcode )
{
    ."get_seqno: " .s ." -> "
    "seqno" method_id
    run_method
    .s
} : get_seqno

// (i1 i2 -- )
{ = { "assert_eq failed" abort } ifnot } : assert_eq

// (i1 i2 -- )
{ = { "assert_eq failed" abort } if } : assert_neq

{ null? { "assert_null failed" abort } ifnot } : assert_null
