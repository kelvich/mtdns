#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

{ ."usage: " @' $0 type ." <workchain-id> [<filename-base>]" cr
  ."Creates a new manual ton dns resolver in specified workchain, with" cr
  ."private key saved to or loaded from <filename-base>.pk" cr
  ."('new-mtdns.pk' by default)" cr 1 halt
} : usage
$# 1- -2 and ' usage if

$1 parse-workchain-id =: wc    // set workchain id from command line argument
def? $2 { @' $2 } { "new-" } cond constant file-base

."Creating new mtdns in workchain " wc . cr

 
"mtdns.fif" include // code
<b null dict, b> // data
null // no libraries
<b b{0011} s, 3 roll ref, rot ref, swap dict, b>  // stack: StateInit



dup hashu wc swap 2dup 2constant wallet_addr
."new wallet address = " 2dup .addr cr
2dup file-base +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr


<b 1 32 u, 1 16 i, 42 256 u, "stas" $, 0 8 u, b>  // stack: StateInit Msg

swap // stack: Msg StateInit

<b b{1000100} s, // src? ext_in_msg_info$10?
  wallet_addr addr,
  b{000010} s, // grams?
  swap <s s, // take StateInit
  b{0} s,
  // swap B, // take Msg_sig
  swap <s s, // Msg
b>
dup ."External message for initialization is " <s csr. cr
2 boc+>B dup Bx. cr // +2 -- store crc32
file-base +"-query.boc" tuck B>file
."(Saved wallet creating query to file " type .")" cr
